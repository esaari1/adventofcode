import queue
from itertools import permutations


input = [
'###########',
'#0.1.....2#',
'#.#######.#',
'#4.......3#',
'###########'
]


input = [
'###################################################################################################################################################################################',
'#...............#.........#...#...#.......#.......#.#...#.........#...........#...............#.#.#.......#.......#.....#...........#...#...#.......#.......#...#....2#...........#',
'#.#.#.#.#.###.#.#####.#.#.#.###.#.#.#######.###.#.#.#.#.#.#.###.#.#.###.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.#.#.#####.###.#.#.#.#.#.#.#####.#.#.###.#######',
'#....1#...#.#...#.......#.......#...#.......#.....#...#.#...#...#.......#.............#.....#...#.#.........#...#.....#.....#.........#...#...#.....#...#.#...#.#.#...#.........#.#',
'#######.#.#.###.#.#######.#####.#.#.#.#.###.#.###.#.#####.#.#.#.#.#.#########.###.#.#.#.###.#.#.#.###.#.###.#.#.#.#.#.#######.#.###########.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.#',
'#...#.....#.#...#.......#.#...#.....#.....#.......#.#...#...........#.........#.....#.........#.#.#...#.....#.....#.......#...#.............#...#.#.#.....#...#.#...#.#.....#.....#',
'#.###.###.#.#.#.#####.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.###.#.###.#####.#.#####.###.#####.#.#.#.#.#.#.#####.#.###.#.###.#.###.#.#.###.#.#.#.#.#.#.###.###.#.###.#.###########.#.###',
'#...........#.......#...........#.#...#...#.........#.......#.....#...............#.....#...#.........#...#.#...#.....#...#...............#.#.....#.........#.........#.........#3#',
'#####.#####.#######.#.#######.#.#.###.#.#.#.#.#########.#####.#####.#######.#.###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.#.#.#.#.###.#####.#######.###.###.#.#####.#.#.###.#.#.#######.#.#',
'#...........#.........#.........#...........#...#.....#.....#...................#.......#.........#.#.#.#.#.#...#.#.........#.#...#.....#...#.#.#.#.....#.#.#...#.#.....#.#.......#',
'#.###.#####.###.#.#.#.#.#.#.#####.###.#.#####.#.#.#.#####.###.###.###.#.#######.#.#.###.#.#.#######.#.#.#.#.#####.#.#.#.#.#.#.###.#######.###.###.#######.#.#.###.#####.#.###.###.#',
'#.....#...............#.#...#.....#...............#.......#.........#.#.#.........#.......#.....#...#.#.....#.....#.#...#.......#.#.#.#...#.....#.......#.#.#.#.#.#.#.#.......#...#',
'#.#.###.#.#.#.#.#####.#####.#.#.#.#.#.#####.#.#####.#.#.###.#####.#.#.#.#.###.#####.#.#.#.#.#.#.#.###.#####.#.#.###.#.#.###.#.#.#.#.#.#########.#######.#.#.###.#.#.#.#.#.#.###.#.#',
'#.#...#...#...#.............#.#.#.........#...#.........#.#.#...#...#...#.........#.#.....#.....#...........#.....#.#.....#.#...#.......#.#.......#.....#.#.#...#...#...#.#.......#',
'#.#.#.#.###.###.###.#####.#.#.#.#.#####.#.###.###.#.#.#.#.###.#.#.#.###.#.#.#####.#.#.#.###.#######.###.###.#.###.###.###.#.#.#.###.###.#.#.###.#.#.#.#.#.#.#####.#.###.#.#.#.#####',
'#...........#.......#.....#...#...#.......#.......#.........#...........#.#...#...#.#...#.........#.#.#.....#.......#.#...#...#.........#.....#.#.#.....#.........#.#...#.#...#...#',
'#.###.###.#.#.###.#.#.###.#####.#.#.###.#.###.###.#.###.###.#####.#.#.#.#.#.#.#.#.#.###.#.#######.#.#.###.#.#.###.#.#.#.#####.#.#.#####.#.#.#.#.#######.#.#.#.#.###.#.#.###.#.#.#.#',
'#.#0......#.#...............#.....#.#.#...#...#...................#...#.#...#...#.....#...#...#.#...#...........#.....#...#.....#.#.....#...#...#.....#...#.....#.......#...#.....#',
'#.###.#.#####.#####.#########.###.#.#.#######.#.#.#.#####.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.###.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.###########.#.###.#.#.#.#.#.###.#',
'#.....#.............#.......#.#.....#.....#.#...#...#.#.#.....#.......#...#...#.#.......#...#.....#.....#...#.#.#...#...#.#.#.....#.#...#.....#.#...#.#.....#.#...#.......#...#...#',
'#.#.#.###.#.#.###.#.#.#.###.#.#.#####.#####.#.#.#####.#.#.#.#.###.#.#.###.#####.#.###.###.###.###.###.###.#.#.###.###.#.###.#.#.#.#####.#####.#.#.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#',
'#.....#.#...#...#...#...#...#.....#.........#.......#...#...#.#.#...#.#.....#.....#.....#.....#...#...#.......#.................#.....#...#.....#...#.........#.#...#...#...#...#.#',
'###.#.#.###.#.#.#####.#.###.#.#.#.#.#.###.###.###.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#.#####.#####.#.#####.###.#####.###########.###.#.#.###.#.#.#.#.#######.#.#.#.###.#.#.#.#.#####',
'#...#.#.......#.#.......#...#.....#.#.#...........#.#.#...#.........#...#...#.#...#.#.............#.............#...#.#...#...........#.#...#...#...#...#.#.#.....#.........#7#...#',
'#.#.#.#.#######.#.#.#.#.###.#.###.#.#.#.#######.###.#.#.#.#.#.###########.###.#.###.#.#.#.###.#########.#.#######.###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#######.#.#####.###.#.#',
'#...............#...#...#.....#...#.............#.#.#.#...#.#...#.#.......#.....#...#...#.#...#.#.........#.......#.#.....#...#.#.#.#...#.#.#.......#.#.#.....#.......#.#...#...#.#',
'###########.#.#.###.#####.#########.#####.#.###.#.#.#.#.#.#.###.#.#.#####.#####.#.#.###.###.###.#.#.#.#.#.#####.###.#####.#.###.#######.###.###.#.#.###.#.#.#.#.#.#.###.#.#.#.###.#',
'#.#...#.........#.#.......#...#.....#.#...#...#.......#.........#...#.#.........#.#.#.........#.#.#...#.....#...#.........#.#...#...#...#...#.....#...#.#.#.....#...#...#...#.....#',
'#.#.#.#.#.###.#.#.#######.#.#.#.###.#.#.#####.#######.#.#.#.#.#.###.#.###.#.#.#.#########.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#####.###.#.#.#.#.#.###.#',
'#...#.#...........#.......#...........#.......#.......#...#...#.#.#.....#.#...........#.#.#.....#.#.........#.....#.....#...#.............#...#...#.....#.....#.....#...#.#.#.#...#',
'#.#.#####.#.#####.#.#####.#########.###.#.###.###.#.#.#.#.#.###.#.#.#.#.#.#######.#.#.#.###.###.#.#.#####.#####.###.###.#.#######.#########.#####.#####.###.#.#######.#.#.#.#####.#',
'#.#.......#...#...#.....#.#6#.......#...#.#.......#.....#.....#...........#...#...#.#.....#.#.#...#.........#.........#.#.....#...#.........#...#.#.#...#.....#.#.....#.#.........#',
'#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#####.#####.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.#.#.#.###.###.#.#.#.#',
'#.#.#.#...#.#.....#.#.#.....#.................#...#.#.#.#...#...........#.#...#.......#...........#...#.........#.#.#.......#...#.......#...#.#...#.#...#...#.#.....#.......#...#.#',
'#.###.#.###.#.#.###.#.#.#.###.#########.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.###.#.#.###.###.#.#.#.#.#.#.#####.#.#.#.###.#.#.#.#.#.#.#.#####.###.#.#.###.#####.###.#.#############.#.#.#',
'#.....#...#.#.........#.......#.....#...#.....#.#.......#...........#.......#.#.#.......#.....#.#.#.......#.....#...#...#...#.....#...#.....#.......#.........#.......#5#.......#.#',
'#.#####.#.#.#.###.###########.#.###.#.#####.#####.###.#####.#################.#.#.#.#.#.###.#####.###.###.###.#.###.###.#.#####.#.#.#.###.#.#####.#.###.#.###.#.###.#.#.#.#.#.###.#',
'#.#.....#...#.........#.....#.#.......#...#...#4#...#...#.#.#...#.....#...#.#...#.........#...#.............#...#.#.#.....#.........#.#.....#...........#.....#.#...#...#.#.....#.#',
'#.#.#.#.#.#.#########.#.#.#.#.#.#.#####.#.###.#.###.###.#.#.#.#.#.#.#.###.#.#######.#####.#.#.###.#.#.###.#.###.#.#.#.#####.#.###.#.#.###.###.#####.#.#.#.#####.#.#.#.###.#.###.#.#',
'#.#...#.....#.......#.....#...#...#.............#.#.#.....#...#...#...#.....#.#.#...#.....#...#...#.#.#.#...#.#.........#.#.......#.......#...#...#.......#.....#.#.#.....#...#...#',
'###################################################################################################################################################################################'
]

none = -1
north = 0
east = 1
south = 2
west = 3


class Node:
    def __init__(self, x, y, d):
        self.x = x
        self.y = y
        self.edges = [None, None, None, None]
        self.lastTry = none
        self.val = d

    def __str__(self):
        return self.hash() + '-' + self.val

    def link(self, other, dir):
        self.edges[dir] = other
        other.edges[(dir + 2) % 4] = self

    def hash(self):
        return str(self.x) + '_' + str(self.y)

    def positionHash(self, dir):
        x = self.x
        y = self.y

        if dir == north:
            y -= 1
        if dir == east:
            x += 1
        if dir == south:
            y += 1
        if dir == west:
            x -= 1
        return str(x) + '_' + str(y)


class Path:
    def __init__(self, start, end, length):
        self.start = start
        self.end = end
        self.length = length

    def __str__(self):
        return f'{self.start} - {self.end} {self.length}'

    def reverse(self):
        return Path(self.end, self.start, self.length)


def findPath(start, end):
    for k in nodes:
        nodes[k].lastTry = none

    q = queue.Queue()
    visited = {}

    q.put((start, 0))
    visited[start] = True

    while not q.empty():
        (v, l) =  q.get()

        if v.val == end.val:
            return Path(start, end, l)

        # if start.val == '0' and v.val not in [start.val, '.']:
        #     continue

        dir = 0
        while dir != 4:
            n = v.edges[dir]
            if n is not None and n not in visited:
                q.put((n, l+1))
                visited[n] = True

            dir += 1

    return None



def findAllKeyPaths():
    paths = {}

    kkeys = list(keyMap.keys())
    a = 0
    while a < len(kkeys) - 1:
        b = a + 1
        while b < len(kkeys):
            path = findPath(keyMap[kkeys[a]], keyMap[kkeys[b]])
            if path is None:
                b += 1
                continue

            if kkeys[a] not in paths:
                paths[kkeys[a]] = {}
            paths[kkeys[a]][kkeys[b]] = path.length

            if kkeys[b] not in paths:
                paths[kkeys[b]] = {}
            paths[kkeys[b]][kkeys[a]] = path.length
            b += 1
        a += 1

    return paths

start = ()
count = 0

row = 0
nodes = {}
keyMap = {}
startNode = None


# build graph
for y in range(1,len(input) - 1):
    line = input[y]
    for x in range(1, len(line) - 1):
        d = line[x]
        if d != '#':
            n = Node(x, y, d)
            nodes[n.hash()] = n
            if n.positionHash(north) in nodes:
                n.link(nodes[n.positionHash(north)], north)
            if n.positionHash(west) in nodes:
                n.link(nodes[n.positionHash(west)], west)

            if d == '0':
                startNode = n

            if d != '.':
                keyMap[d] = n


allPaths = findAllKeyPaths()
# for k in allPaths:
#     print(k)
#     for p in allPaths[k]:
#         print(p, allPaths[k][p])

#     print()

l = list(allPaths.keys())
p = list(permutations(l))
answer = 999999999999999999

for order in p:
    if order[0] != '0':
        continue

    order = order + tuple('0')
    # if order[1] not in allPaths['0']:
    #     continue

    a = 0
    for i in range(len(order) - 1):
        a += allPaths[order[i]][order[i+1]]
        if a > answer:
            break

    if a < answer:
        answer = a

print(answer)
